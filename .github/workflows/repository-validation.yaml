---
name: Repository Validation

on:
  pull_request:
    branches: ["main"]
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  validate:
    name: Repository Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setup Python
        uses: actions/setup-python@0a44ba7841725637a19e28fa30b79a866c81b0a6 # v4.0.4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          pip install pyyaml jsonschema requests

      - name: Install yq for YAML processing
        uses: mikefarah/yq@v4.44.3

      - name: Run comprehensive repository validation
        run: |
          python3 scripts/validate-repository.py --verbose

      - name: Validate specific components
        run: |
          echo "üîç Running individual validation checks..."
          
          # Test individual validators work
          python3 scripts/validate-kustomizations.py kubernetes/apps/ || echo "Kustomization validation issues found"
          python3 scripts/validate-schema-alignment.py kubernetes/apps/ || echo "Schema alignment issues found"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Check for required documentation
        run: |
          echo "üìö Checking for required documentation files..."
          
          required_files=("README.md" "CONTRIBUTING.md" "SECURITY.md")
          missing_files=()
          
          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              missing_files+=("$file")
            else
              echo "‚úÖ Found: $file"
            fi
          done
          
          if [[ ${#missing_files[@]} -gt 0 ]]; then
            echo "‚ùå Missing required documentation files:"
            printf '  - %s\n' "${missing_files[@]}"
            exit 1
          fi
          
          echo "üéâ All required documentation files are present!"

      - name: Validate markdown files
        uses: DavidAnson/markdownlint-cli2-action@v16
        with:
          globs: |
            **/*.md
            !**/node_modules/**
            !**/.git/**

  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [validate, security-scan, documentation]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          echo "üìä Quality Gates Summary"
          echo "======================="
          
          # Check individual job results
          validate_result="${{ needs.validate.result }}"
          security_result="${{ needs.security-scan.result }}"
          docs_result="${{ needs.documentation.result }}"
          
          echo "Repository Validation: $validate_result"
          echo "Security Scan: $security_result"
          echo "Documentation Check: $docs_result"
          
          # Determine overall result
          if [[ "$validate_result" == "success" && "$security_result" == "success" && "$docs_result" == "success" ]]; then
            echo ""
            echo "üéâ All quality gates passed!"
            echo "Repository is ready for deployment."
          else
            echo ""
            echo "‚ùå Some quality gates failed."
            echo "Please address the issues before merging."
            exit 1
          fi
